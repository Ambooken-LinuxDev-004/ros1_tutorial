catkin init -> to initialize workspace
catkin build -> to build workspace
catkin_create_pkg <name> [<dependencies> like rospy] -> to create a package(Note:- Must build the workspace each time when you create a new package)

ROS package -> all the files that a specific ROS program contains. It contains launch folder, src folder, package.xml, CMakeLists.txt etc..

To navigate packages -> roscd <packagename>

ROS node -> a process that executes ROS program(always launch the node)

ROS Parameter Server -> 

ROS ENviroment Variables -> type "export | grep ROS"


rosrun <packagename> <nodename> - to run <nodename> in ros enviroment
roslaunch <packages> <launchfilename> to run <launchfilename> in ros enviroment and to start many nodes at once

rostopic list -> displays the topic
rostopic -h -> shows the list of commands and it's funtion/purpose regarding rostopic

rostopic echo /<topicname> -> print messages to screen(To read the info that is being published into the </topicname>)
rostopic echo /<topicname> -n1 -> publish/shows the last message that is published into the topic

rostopic info </topicname> -> to get info about the </topicname> [like Type of msg that this topic uses, node that is either publishing/subscribing into the current </topicname>] [Also shows the node (if subscribed) that uses this </topicname>]


rostopic pub -> publish data to topic [eg. rostopic pub /cmd_vel geometry_msgs/Twist] 
rostopic pub [topic] [msg_type] [args]
rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[, represents0.0, 0.0, 1.8]' -> '-1' rostopic to only publish one message then exit


rosed [package_name] [filename] -> allows you to directly edit a file within a package by using the package name rather than having to type the entire path to the package [e.g. rosed roscpp Logger.msg]

*****
source /opt/ros/noetic/setup.bash -> sourcing ros enviroment
source ~/ros1_tutorial/ros1_tutorial/catkin_ws/devel/setup.bash -> sourcing <workspace> in ros enviroment
******

rospack list -> it lists all packages that are located in my package
rospack list | grep <packagename> -> shows the path of the package

catkin clean --orphans -> removes package traces from devel, build & other folders from workspace permanently(note:- it should be deleted from src folder berfore executing this command)

** launch node(to run multiple node at same time)
uses .launch extension
it like xml language

roslaunch <packagename> <nodename>(eg. start.launch)
rosnode list -> lists node that are currently working

rqt(visualisation tool used to show the entire architecture of currently active project)


rosmsg info <msg type of topic> -> shows datatype of msg
rosmsg show <message> -> to get info about a message[e.g rosmsg show std_msgs/Int32 --- here std_msgs is a package containing class Int32]

Subscriber is a node that reads information from a topic

rosnode kill <nodename> -> to stop the node or topic from publishing

ROS topics -> used for communicate with robot. Robot will keep listening to the last message that you published in topic. publisher is a ROS program that writes a msg into a topic[e.g. /cmd_vel topic (used to send velocity commands)]

Services -> allows you to code a specific functionality for your robot and provide anyone to call it.

Service server -> provides functionality to anyone who wants to use it(call it)
Service Client -> one who requests service functionality  [rosservice call /service_demo]

Service must be running before you call it [launch before calling]

Actions -> [Similar to services]. here robot can do multiple tasks/actions at the same time (no need to wait for 1 service/action to end for executing another). Actions provide feedback.

Action server must be started before calling.


Launch file -> contains node tag [e.g. <node pkg="" type="" name="" output=""></node>]

******** REAL ROBOT LAB ********

